<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.0.0">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2020-03-17T03:39:13-03:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">Leonardo Benedeti</title><subtitle>Meu site e base de conhecimento</subtitle><author><name>Leonardo Benedeti</name></author><entry><title type="html">#5 Meta Minha - Preparação do Ambiente</title><link href="http://localhost:4000/meta-minha-sprint-zero" rel="alternate" type="text/html" title="#5 Meta Minha - Preparação do Ambiente" /><published>2020-03-17T00:00:00-03:00</published><updated>2020-03-17T16:00:00-03:00</updated><id>http://localhost:4000/meta-minha-sprint-zero</id><content type="html" xml:base="http://localhost:4000/meta-minha-sprint-zero">&lt;p&gt;Uma imagem é melhor do que mil palavras…. pois bem! (sim já tinha iniciado rsrs)&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;assets/img/metaminha/sprint-zero/1-sprint-zero.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Este será, talvez, o menor post da série. Aqui darei início aos trabalhos mais técnicos do que conceituais.&lt;/p&gt;

&lt;p&gt;Mas de onde surgiu a ideia de fazer uma &lt;strong&gt;Sprint Zero&lt;/strong&gt; neste app tão pequeno. Precisamos disso ???&lt;/p&gt;

&lt;p&gt;Vamos tentar pintar um cenário: Para uma casa ser construída é necessário uma fundação bem sólida para que a casa se mantenha firme, certo ?!&lt;/p&gt;

&lt;p&gt;A Sprint Zero funciona da mesma maneira. É um período onde todas as frentes podem atuar sem impactar nada, preparando tudo para o projeto iniciar.&lt;/p&gt;

&lt;p&gt;Exemplos que acontecem durante a Sprint Zero, por frente:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Product Owner&lt;/strong&gt;: Escreve as histórias na ordem de prioridade para a primeira sprint do projeto.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Scrum Master&lt;/strong&gt;: Orienta o time, sugerindo como utilizar o cockpit da maneira mais otimizada.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Quality &amp;amp; Assurance&lt;/strong&gt;: Escreve os cenários de testes básicos e configura um ambiente automatizado de testes ( Tema não abordado por aqui, AINDA!).&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Developers&lt;/strong&gt;: Criam essa base para que todo o app seja criado de maneira sustentável e sólida.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Neste app, vamos abordar apenas duas frentes, &lt;strong&gt;Product Owner&lt;/strong&gt; e &lt;strong&gt;Developers&lt;/strong&gt;. Dado o contexto, não tem porque simular as outras frentes. Faria sentido caso estipulasse um prazo para conclusão, mas como não faremos isso… =D&lt;/p&gt;

&lt;p&gt;Separando as responsabilidades por frente:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Product Owner&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;assets/img/metaminha/agil/6-descricao-historias.png&quot; alt=&quot;&quot; /&gt;
Com o boné de &lt;strong&gt;PO&lt;/strong&gt;, tenho muito trabalho pela frente mas não vou descrevê-lo na Sprint-zero. Vou mostrar as histórias escritas a cada sprint que for evoluindo o aplicativo. #aindaNãoEscrevi&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Developer&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Finalmente na minha zona de conforto. Na frente de desenvolvimento, na Sprint-zero, vou configurar muita coisa. Como puderam ver na primeira imagem do post, em algumas tasks que criei.&lt;/p&gt;

&lt;p&gt;Estou utilizando uma técnica que pratiquei em um dos projetos que atuei.&lt;/p&gt;

&lt;p&gt;Eu sou um só, certo ? (Adoraria ter um clone rsrs)&lt;/p&gt;

&lt;p&gt;Eu, sendo um só, LOGICAMENTE, só consigo fazer uma coisa por vez. Com isso fiz o seguinte:&lt;/p&gt;

&lt;div class=&quot;grid&quot;&gt;
    &lt;div class=&quot;a text&quot;&gt;
        &lt;span&gt;
            Limitei, mentalmente, o Work In Progress do projeto. &lt;br /&gt;
            &lt;b&gt;Porque?&lt;/b&gt; &lt;br /&gt;
            Com este limite de uma task por vez, não vou me afogar com 3, 4, 5 tasks por vez. O que normalmente acontece na maioria dos projetos.
        &lt;/span&gt;
    &lt;/div&gt;
    &lt;div class=&quot;b img&quot;&gt;
        &lt;img src=&quot;assets/img/metaminha/sprint-zero/2-WIP.png&quot; alt=&quot;&quot; /&gt;
    &lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;Outro detalhe que a limitação de execução de tasks ocasiona, é que uma task mal “quebrada”, vai ter dependência de outra task e com isso o dev é meio que OBRIGADO a fazer duas tasks ao mesmo tempo. Esse limite na sprint seguinte, vai educar o dev a quebrar a task sem dependência na próxima sprint.&lt;/p&gt;

&lt;p&gt;Ex.: Uma história que tenha uma chamada de api e que liste o resultado na tela.&lt;/p&gt;

&lt;p&gt;A quebra de tasks pode ser assim:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Criar modelo de dados de itens da lista&lt;/li&gt;
  &lt;li&gt;Criar widget para repetir após o retorno da api&lt;/li&gt;
  &lt;li&gt;Criar API e printar o retorno no console&lt;/li&gt;
  &lt;li&gt;Conectar o widget com a API criando a lista baseado no modelo&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Aqui criei 3 tasks independentes e uma para fechar todas elas. Eventualmente as tasks vão ter dependência, mas o ideal é evitar esse tipo de coisa para que mais de uma pessoa consiga atuar na mesma história. =D&lt;/p&gt;

&lt;p&gt;Outro item interessante é tentar criar uma base de widgets, componentes ou o que for reutilizar no projeto.&lt;/p&gt;

&lt;p&gt;No decorrer do projeto pretendo conseguir entregar um design system com o que estou criando.&lt;/p&gt;

&lt;p&gt;Para isso, ainda na sprint-zero estou criando alguns widgets que serão a base do meu app.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;assets/img/metaminha/sprint-zero/3-design-system.png&quot; alt=&quot;&quot; /&gt;
Para validar melhor este item com todo app junto, vale dar uma revisitada no post de &lt;a href=&quot;/meta-minha-design&quot; target=&quot;_blank&quot;&gt;#2 - Design da ideia&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Aqui então finalizo o post, mas a Sprint-zero ainda vai continuar correndo até conseguir fechar todos os itens, UM A UM, sem pressa e sem correria, para manter sempre a qualidade.&lt;/p&gt;

&lt;p&gt;Em breve a #sprint-01 começa e aí sim vamos codar. =D&lt;/p&gt;</content><author><name>Leonardo Benedeti</name></author><category term="flutter" /><category term="android" /><category term="ios" /><category term="agil" /><category term="ux" /><category term="ui" /><category term="branding" /><category term="devops" /><category term="jenkins" /></entry><entry><title type="html">#4 Meta Minha - Organização e priorização</title><link href="http://localhost:4000/meta-minha-agil" rel="alternate" type="text/html" title="#4 Meta Minha - Organização e priorização" /><published>2020-03-03T00:00:00-03:00</published><updated>2020-03-03T16:00:00-03:00</updated><id>http://localhost:4000/meta-minha-agil</id><content type="html" xml:base="http://localhost:4000/meta-minha-agil">&lt;p&gt;Agora vamos organizar tudo que falamos até agora. Vamos tentar mostrar o que conheço sobre Ágil.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Vale comentar: Métodos ágeis normalmente são frameworks, então aqui vou montar um que faça sentido para o contexto do projeto.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Vamos colocar alguns fatos na mesa aqui neste post.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Motivos da saga&lt;/strong&gt;: Criar algo para mostrar o que conheço em cada step de um projeto completo.&lt;br /&gt;
&lt;strong&gt;Status atual&lt;/strong&gt;: Hoje atuo em um projeto muito puxado, pra não dizer Tóxico, portanto tempo para escrever, documentar e ainda fazer o app, é um problema e tanto, mas vamos lá. Vai dar bom.&lt;br /&gt;
&lt;strong&gt;Prazos&lt;/strong&gt;: Dado o contexto acima, não vou lidar com prazos neste post, caso estivesse 100% livre para criar toda saga, criaria OKRs de performance, gráficos e tudo que conheço. Mas como não consigo garantir quando consigo atuar neste projeto, não vai fazer sentido mensurar. Prometo em um próximo projeto fazer isso. =D&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;Cenário posto, vamos ao que montei para me organizar nessa caminhada.&lt;/p&gt;

&lt;p&gt;Antes de mostrar o que montei, vale comentar de como montei, mais precisamente onde.&lt;/p&gt;

&lt;p&gt;Já conhecia de alguns projetos que atuei remotamente mas não tinha testado e vou utilizar aqui uma aplicação para gerenciar projetos remotamente chamada &lt;a href=&quot;https://miro.com/&quot; target=&quot;_blank&quot;&gt;Miro&lt;/a&gt;. Estou curtindo muito utilizá-la para este projeto, fica bem fácil mostrar o que estou fazendo. #recomendo&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Voltando aos trilhos do post…&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Todo produto tem suas regras de negócio e detalhes específicos, certo ?&lt;/p&gt;

&lt;p&gt;Neste projeto criei uma ideia do zero para ter base para criar tudo aqui do zero.&lt;/p&gt;

&lt;p&gt;Com isso criei as &lt;strong&gt;histórias&lt;/strong&gt; do projeto, elas estão com “post its” de cores diferentes, já explico isso.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;assets/img/metaminha/agil/1-historias.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Voltando ao porquê dos post its coloridos. Toda história tem um peso para ser criada, utilizei a métrica &lt;strong&gt;T-Shirt&lt;/strong&gt; para “precificar” as histórias.&lt;/p&gt;

&lt;p&gt;Então temos na sequência:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;GG - Será que não vale mais a pena quebrar em duas G ? (sim, consegui não ter histórias GG. #topzera)&lt;/li&gt;
  &lt;li&gt;G - Tela online ou fluxo complexo&lt;/li&gt;
  &lt;li&gt;M - Tela Complexa ou funcionalidade nativo&lt;/li&gt;
  &lt;li&gt;P - Tela Offline ou Componente interativo&lt;/li&gt;
  &lt;li&gt;PP - Componente estático
E a sequência correspondendo a uma cor de post it, dai temos nossa precificação do print das histórias.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;assets/img/metaminha/agil/2-tshirt.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Após definir e precificar precisamos ter em mente os entregáveis com suas devidas prioridades. Então aqui vamos criar nosso &lt;strong&gt;RoadMap&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Separei em duas partes, a primeira versão do app, comumente chamada de MVP.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;O melhor conceito de MVP que escutei por aí é: O MVP é como uma fatia de um bolo, tem todas as camadas, mas não é o bolo inteiro. Neste caso o bolo inteiro é o produto finalizado. Logo o MVP vai dar o gostinho e provar que o produto completo vale a pena.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Outro item nesse print é a &lt;strong&gt;priorização&lt;/strong&gt; das histórias. Como criei tudo pensando no fluxo completo, já meio que criei tudo priorizando, mas consegui quebrar em mais de uma entrega para exemplificar este item.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;assets/img/metaminha/agil/3-roadmap.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Contexto de &lt;strong&gt;MVP&lt;/strong&gt; posto, precisamos falar do nosso.&lt;/p&gt;

&lt;p&gt;Falando em poucas palavras, o MVP precisa: permitir que um usuário, logado ou não, defina suas próprias metas e detalhes.&lt;/p&gt;

&lt;p&gt;As próprias histórias explicam bem o fluxo básico do app.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;assets/img/metaminha/agil/4-mvp.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;MVP entregue e publicado nas lojas, vamos melhorar o app para conseguir entregar o Bolo todo. Daí vamos falar agora da &lt;strong&gt;Release 2&lt;/strong&gt; do app.&lt;/p&gt;

&lt;p&gt;Também em poucas palavras: Vamos evoluir como o usuário se conecta ao app, melhorar a experiência, pensando que nosso usuário tenha várias metas e precise buscar suas metas e detalhes. Além de algo que confesso que está me deixando temeroso, Dark Theme.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;assets/img/metaminha/agil/5-release2.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Feito. Toda priorização e criação das histórias. Ufa…. não pera. O que eu preciso criar em cada história? Detalhes? O que testar depois ?&lt;/p&gt;

&lt;p&gt;É toda história precisa de seus detalhes e tudo mais.&lt;/p&gt;

&lt;p&gt;A &lt;strong&gt;Descrição básica das histórias&lt;/strong&gt; que vou criar aqui vai contar com os seguintes “campos”: Título, Descrição e Critérios de Aceite.&lt;/p&gt;

&lt;p&gt;Não vou explicar dependência de histórias aqui por não fazer sentido e nem ser possível exemplificar. Como estarei sozinho na empreitada, vou precisar fazer task a task e com a priorização bem feita, acaba que não temos dependência. #TOP&lt;/p&gt;

&lt;p&gt;Abaixo temos a lista de histórias ao molde do Miro, curti bastante por ser bem simples. Reparem que mantive a cor de cada história no detalhe dela. 
&lt;img src=&quot;assets/img/metaminha/agil/6-descricao-historias.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Esta é a &lt;strong&gt;primeira história do app e seus detalhes&lt;/strong&gt;, talvez a mais simples e rápida.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;assets/img/metaminha/agil/7-detalhes-historia-onboarding.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Bom. Com tudo isso criado, o interessante é ter sempre todo contexto do projeto em mente certo?&lt;/p&gt;

&lt;p&gt;Pois bem, cá temos o &lt;strong&gt;Cockpit do app Meta Minha&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;assets/img/metaminha/agil/8-cockpit.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;A principal funcionalidade do Miro é compartilhar o que é criado com os times remotos, com isso consegui criar um link para vocês conferirem por lá a evolução do projeto. =D&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://miro.com/app/board/o9J_kvUf1Hk=/&quot; target=&quot;_blank&quot;&gt;https://miro.com/app/board/o9J_kvUf1Hk=/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/meta-minha-sprint-zero&quot; target=&quot;_blank&quot;&gt;#5 - Preparação do ambiente&lt;/a&gt;&lt;br /&gt;&lt;/p&gt;</content><author><name>Leonardo Benedeti</name></author><category term="flutter" /><category term="android" /><category term="ios" /><category term="agil" /><category term="ux" /><category term="ui" /><category term="branding" /><category term="devops" /><category term="jenkins" /></entry><entry><title type="html">#3 Meta Minha - Logo</title><link href="http://localhost:4000/meta-minha-logo" rel="alternate" type="text/html" title="#3 Meta Minha - Logo" /><published>2020-02-26T00:00:00-03:00</published><updated>2020-02-26T16:00:00-03:00</updated><id>http://localhost:4000/meta-minha-logo</id><content type="html" xml:base="http://localhost:4000/meta-minha-logo">&lt;p&gt;&lt;strong&gt;“Offtopic” da saga&lt;/strong&gt;, sempre curti desenhar, pensar no papel e coisas assim. Na minha infância cheguei a desenhar muito mesmo, mas infelizmente não mantive a prática de desenho e hoje apenas mantive o pensamento no papel. Minha mãe é artesã e posso dizer que “cursei” com ela a faculdade que fez sobre arte. =D&lt;/p&gt;

&lt;p&gt;Com esse background, apenas no feeling, vamos tentar pensar alguma logo para o aplicativo.&lt;/p&gt;

&lt;p&gt;Um pequeno brain storming para iniciar:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Logo com a letra M&lt;/li&gt;
  &lt;li&gt;Gráficos de barra evoluindo&lt;/li&gt;
  &lt;li&gt;M e M invertidos&lt;/li&gt;
  &lt;li&gt;Logo da pessoa fincando uma bandeira na lua (logo bucket instagram)&lt;/li&gt;
  &lt;li&gt;…&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Com tudo isso em mente, nada como iniciar com um papel em branco e sair rabiscando. Fiz isso e cheguei nesse nível de rabisco e daqui tirei a ideia que mais me pareceu simples para criar no Adobe XD.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;assets/img/metaminha/desenho-logo-meta-minha.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Depois de alguns desenhos sem referência, busquei no amigo Google o termo “Logo com a letra M” e achei a seguinte logo.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;assets/img/metaminha/logo-referencia-google.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Baseado nisso, cheguei no desenho que escolhi. Inclusive cheguei a fazer no papel o contorno representando o app.&lt;/p&gt;

&lt;p&gt;Fiz ainda duas versões no desenho, uma com fundo branco e outra com fundo mesclado com dois verdes, porém não cheguei a criar no Adobe as duas.&lt;/p&gt;

&lt;p&gt;Explico o porque: Quando fiz a com fundo branco reparei que combinou perfeitamente com a identidade do app que tem o fundo branco como base. =D&lt;/p&gt;

&lt;p&gt;Com tudo isso em mente eis o que criei fazendo Path por Path no Adobe XD.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;assets/img/metaminha/logo.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Após o desenho no papel, demorei um pouco para finalizar a logo por  conta de ter feito path por path, alinhar todas as alturas, larguras, tamanho, sombra….. demorou mas saiu rsrs&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/meta-minha-agil&quot; target=&quot;_blank&quot;&gt;#4 - Organização e priorização&lt;/a&gt;&lt;br /&gt;&lt;/p&gt;</content><author><name>Leonardo Benedeti</name></author><category term="flutter" /><category term="android" /><category term="ios" /><category term="agil" /><category term="ux" /><category term="ui" /><category term="branding" /><category term="devops" /><category term="jenkins" /></entry><entry><title type="html">#1 Meta Minha - A Ideia</title><link href="http://localhost:4000/meta-minha-a-ideia" rel="alternate" type="text/html" title="#1 Meta Minha - A Ideia" /><published>2020-02-18T00:00:00-03:00</published><updated>2020-02-18T16:00:00-03:00</updated><id>http://localhost:4000/meta-minha-a-ideia</id><content type="html" xml:base="http://localhost:4000/meta-minha-a-ideia">&lt;p&gt;Vamos ao primeiro post da série Meta Minha - A Saga, explicando um pouco da Ideia e porque ela surgiu.&lt;/p&gt;

&lt;p&gt;Atualmente trabalho em uma consultoria que presta serviços para mega clientes e com isso os terceirizados, normalmente, não tem tanta liberdade para opinar no produto, mesmo que seja uma ideia para melhorar.&lt;/p&gt;

&lt;p&gt;Além desse contexto acima, sobre a minha posição atual, é bom comentar um pouco sobre o meu perfil.&lt;/p&gt;

&lt;p&gt;Eu sou muito criativo e gosto de tentar soluções que ainda não foram tentadas. Onde todo mundo normalmente segue uma linha, muitas vezes DITADA por um gerente ou cliente, eu sempre questiono para saber se esse é o melhor caminho, sempre sugerindo novas ideias para tentar melhorar o processo, mas nem sempre tenho voz.&lt;/p&gt;

&lt;p&gt;Então tive a tal da ideia que comentei acima, vou criar um app completo, do zero, passando por todos os passos.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;WOW&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Pensando assim parece ser uma ideia maluca mesmo.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Como alguém que vive fazendo horas extras e tem suas obrigações em casa, conseguiria tal feito? Criar um app do zero até a publicação, documentando todo processo?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;É, nem eu sei ao certo a resposta, mas tive uma certeza que precisava criar isso para mostrar o meu potencial e provar para mim mesmo que consigo tal feito.&lt;/p&gt;

&lt;p&gt;Bom. Esse foi o motivo. Mas e a ideia em si?&lt;/p&gt;

&lt;p&gt;Vamos ao contexto do que pensei…&lt;/p&gt;

&lt;p&gt;Em um dia, saindo de um cliente na Faria Lima, decidi sentar em um café e &lt;strong&gt;pensar no papel&lt;/strong&gt; alguma coisa e daí nasceu.&lt;/p&gt;

&lt;p&gt;Um app de Metas para controlar o meu momento atual. Vamos ao desenho.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;assets/img/metaminha/1-desenho-ideia.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;No desenho temos:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Uma tela que abriga todas as suas metas com um marcador de progresso mostrando o quanto você já fez para atingir a meta.&lt;/li&gt;
  &lt;li&gt;No detalhe de cada meta, temos os itens para atingi-la&lt;/li&gt;
  &lt;li&gt;Em ambas telas desenhei também o comportamento do AppBar retraído e expandido&lt;/li&gt;
  &lt;li&gt;Também na sequência percebi que um login para isso tudo seria interessante.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Então até aqui temos um papel desenhado e algumas ideias fervilhando, mas não adianta ter apenas uma ideia no papel e sair desenvolvendo.&lt;/p&gt;

&lt;p&gt;Com a ideia posta, pensei em como otimizar meu tempo e daí, no próximo post, vou mostrar alguns detalhes de como vou desenhar toda a ideia usando o app Adobe XD.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/meta-minha-design&quot; target=&quot;_blank&quot;&gt;#2 - Design&lt;/a&gt;&lt;/p&gt;</content><author><name>Leonardo Benedeti</name></author><category term="flutter" /><category term="android" /><category term="ios" /><category term="agil" /><category term="ux" /><category term="ui" /><category term="branding" /><category term="devops" /><category term="jenkins" /></entry><entry><title type="html">#2 Meta Minha - Design</title><link href="http://localhost:4000/meta-minha-design" rel="alternate" type="text/html" title="#2 Meta Minha - Design" /><published>2020-02-18T00:00:00-03:00</published><updated>2020-02-18T16:00:00-03:00</updated><id>http://localhost:4000/meta-minha-design</id><content type="html" xml:base="http://localhost:4000/meta-minha-design">&lt;p&gt;Neste post vou entrar em um terreno desconhecido, nem tanto, mas não conheço tantos detalhes então talvez deixe algo passar.&lt;/p&gt;

&lt;p&gt;Vou estruturar a escrita para fazer sentido, pois fui criando meio sem ter noção de como fazer componentes e coisas assim.&lt;/p&gt;

&lt;p&gt;Vou mostrar primeiro os componentes que criei e como estou utilizando no protótipo.&lt;/p&gt;

&lt;h3 id=&quot;componentes&quot;&gt;Componentes&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;assets/img/metaminha/2-componentes.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Explicando no geral, quis deixar a ideia mais estruturada possível, para quando for escrever o código, já ter noção de todos os estados de componentes, como botões, toggles e listas.&lt;/p&gt;

&lt;p&gt;Vou explicar alguns apenas, para estender tanto o post sobre design, até para não me perder na explicação. rsrs&lt;/p&gt;

&lt;h3 id=&quot;botões---primaryclear&quot;&gt;Botões - Primary/Clear&lt;/h3&gt;

&lt;div class=&quot;grid&quot;&gt;
    &lt;div class=&quot;a img&quot;&gt;
        &lt;img src=&quot;assets/img/metaminha/3-componente-botao-primary.png&quot; alt=&quot;&quot; /&gt;
    &lt;/div&gt;
    &lt;div class=&quot;b img&quot;&gt;
        &lt;img src=&quot;assets/img/metaminha/3.2-componente-botao-clear.png&quot; alt=&quot;&quot; /&gt;
    &lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Primary&lt;/strong&gt; - Este botão é responsável por ações principais no app, ações que faria o usuário percorrer todo o app baseado no que desenhei como fluxo feliz.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Clear&lt;/strong&gt; - Este botão é responsável por ações secundárias do app, ações como Skip do login e sair da aplicação, não são coisas que quero chamar atenção do usuário. Portanto utilizei este estado do botão.&lt;/p&gt;

&lt;h3 id=&quot;toggle---ativadodesativado&quot;&gt;Toggle - Ativado/Desativado&lt;/h3&gt;

&lt;div class=&quot;grid&quot;&gt;
    &lt;div class=&quot;a img&quot;&gt;
        &lt;img src=&quot;assets/img/metaminha/4-componente-toggle-ativado.png&quot; alt=&quot;&quot; /&gt;
    &lt;/div&gt;
    &lt;div class=&quot;b img&quot;&gt;
        &lt;img src=&quot;assets/img/metaminha/4.1-componente-toggle-desativado.png&quot; alt=&quot;&quot; /&gt;
    &lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;Aqui não temos mistério, um toggle para ativar ou desativar algo, portanto temos os dois estados para o componente.&lt;/p&gt;

&lt;h3 id=&quot;item-detalhe-meta---não-executadoexecutadoremover&quot;&gt;Item detalhe meta - Não Executado/Executado/Remover&lt;/h3&gt;

&lt;div class=&quot;grid&quot;&gt;
    &lt;div class=&quot;a img&quot;&gt;
        &lt;img src=&quot;assets/img/metaminha/5-componente-item-detalhe-meta.png&quot; alt=&quot;&quot; /&gt;
    &lt;/div&gt;
    &lt;div class=&quot;b img&quot;&gt;
        &lt;img src=&quot;assets/img/metaminha/5.1-componente-item-detalhe-meta-selecionado.png&quot; alt=&quot;&quot; /&gt;
    &lt;/div&gt;
&lt;/div&gt;

&lt;div class=&quot;grid&quot;&gt;
    &lt;div class=&quot;a img&quot;&gt;
        &lt;img src=&quot;assets/img/metaminha/5.2-componente-item-detalhe-meta-remover.png&quot; alt=&quot;&quot; /&gt;
    &lt;/div&gt;
    &lt;div class=&quot;b img&quot;&gt;&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;Os estados aqui são 3 e controlam mais que um estado, controla também um comportamento. Além de selecionado e não selecionado também criei o estado para mostrar como seria caso o usuário quisesse remover o item.&lt;/p&gt;

&lt;p&gt;Bom… chega de componentes, para não estender tanto o post.&lt;/p&gt;

&lt;h3 id=&quot;protótipo&quot;&gt;Protótipo&lt;/h3&gt;

&lt;p&gt;Tentei seguir o máximo do desenho mas alterei algumas coisas e incluí outras que não desenhei por ser bem padrão como o Onboarding do app.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;assets/img/metaminha/6-prototipo-final.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Disclaimer: Não fiz nenhum curso nem nada relacionado ao assunto, portanto não me julguem rsrs&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Com o protótipo montado precisei ver com um pouco mais de vida antes de validar alguns pontos para partir para o desenvolvimento.&lt;/p&gt;

&lt;p&gt;Vamos então para a navegação deste protótipo. Até então temos um protótipo estático. Vamos dar vida a ele.&lt;/p&gt;

&lt;h3 id=&quot;protótipo-navegável&quot;&gt;Protótipo navegável&lt;/h3&gt;

&lt;p&gt;Linkei todo cenário possível que enxerguei para os casos de uso que imaginei no app. Vendo de cima fica um emaranhado de links impossível de entender.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;assets/img/metaminha/6.1-prototipo-navegavel.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;div class=&quot;grid&quot;&gt;
    &lt;div class=&quot;a img&quot;&gt;
        &lt;img src=&quot;assets/img/metaminha/fluxo.gif&quot; alt=&quot;&quot; /&gt;
    &lt;/div&gt;
    &lt;div class=&quot;b text&quot;&gt;
        Para facilitar o entendimento do fluxo do app e não precisar explicar um a um com prints aqui, fiz o seguinte: Gravei a navegação e na sequência segue o gif do fluxo completo. 
    &lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;Caso queira validar o protótipo com a visão de desenvolvedor e com mais detalhes clique no link abaixo.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://xd.adobe.com/view/06b9671d-61a3-4f79-4e44-78921d4c12e3-7088/&quot; target=&quot;_blank&quot;&gt;https://xd.adobe.com/view/06b9671d-61a3-4f79-4e44-78921d4c12e3-7088/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Caso tenha algum problema para acessar, provavelmente estou usando o link para outro projeto. Mas assim que receber a mensagem retorno para o link.&lt;/p&gt;

&lt;p&gt;Infelizmente não tenho a versão paga do Adobe XD. #AdobePagaNois rsrs&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/meta-minha-logo&quot; target=&quot;_blank&quot;&gt;#3 - Logo&lt;/a&gt;&lt;br /&gt;&lt;/p&gt;</content><author><name>Leonardo Benedeti</name></author><category term="flutter" /><category term="android" /><category term="ios" /><category term="agil" /><category term="ux" /><category term="ui" /><category term="branding" /><category term="devops" /><category term="jenkins" /></entry><entry><title type="html">#0 Meta Minha - A Saga</title><link href="http://localhost:4000/meta-minha-a-saga" rel="alternate" type="text/html" title="#0 Meta Minha - A Saga" /><published>2020-02-17T00:00:00-03:00</published><updated>2020-02-17T16:00:00-03:00</updated><id>http://localhost:4000/meta-minha-a-saga</id><content type="html" xml:base="http://localhost:4000/meta-minha-a-saga">&lt;p&gt;Pensei outro dia: Como posso provar o que conheço em todas as áreas mais básicas para criação de um app?&lt;/p&gt;

&lt;p&gt;Daí veio a ideia maluca na mente: Criar um app simples, passando por todos os processos: Ágil(organizando tudo), UX(conheço o básico), Devops(já fiz umas mágicas por aqui), Desenvolvimento(minha praia) e por fim a Publicação.&lt;/p&gt;

&lt;p&gt;Pois bem, pra iniciar bem 2020 por aqui, vou criar uma série de posts com todas as áreas separadas. Não sei bem quantos posts vou criar nesta saga, mas conteúdo de como pensar, desenhar, planejar, preparar, desenvolver e publicar um app, vai estar tendo sim. =D&lt;/p&gt;

&lt;p&gt;Pois bem, vamos iniciar organizando a bagunça toda pra fazer sentido.&lt;/p&gt;

&lt;p&gt;Pensei as seguintes frentes de trabalho:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Ideia&lt;/strong&gt; - Mostrar de onde e como surgiu(sim a ideia já existe)&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Design da ideia&lt;/strong&gt; - Baseado no primeiro item, vou mostrar detalhes de como vou desenhar todo o projeto ( dev pagando de ux rsrs )&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Logo&lt;/strong&gt; - Toda ideia precisa de uma logo, aqui vou mostrar como costumo pensar e desenhar uma para os meus projetos&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Organização e priorização&lt;/strong&gt; - Organizar toda ideia, com o que aprendi com esse tal de Ágil&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Preparação do ambiente&lt;/strong&gt; - Este item vai ser uma espécie de sprint-zero do projeto, vou criar toda base e configurações que preciso&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;DevOps&lt;/strong&gt; - Precisei destacar este item por se mostrar muito maior do que o imaginado&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Desenvolvimento&lt;/strong&gt; - Utilizando a organização pensada no post de organização com ágil, vamos sprint a sprint entregando o planejado&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Publicação MVP&lt;/strong&gt; - Após todo desenvolvimento, vou mostrar todo processo de publicação nas lojas Android e iOS.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Então até aqui teremos 7 tópicos, que vou quebrar em mais alguns posts.&lt;/p&gt;

&lt;p&gt;A cada post que criar vou incluir o link abaixo para facilitar a leitura e sequência da ideia toda =D&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/meta-minha-a-ideia&quot; target=&quot;_blank&quot;&gt;#1 - A Ideia&lt;/a&gt;&lt;br /&gt;
&lt;a href=&quot;/meta-minha-design&quot; target=&quot;_blank&quot;&gt;#2 - Design da ideia&lt;/a&gt;&lt;br /&gt;
&lt;a href=&quot;/meta-minha-logo&quot; target=&quot;_blank&quot;&gt;#3 - Logo&lt;/a&gt;&lt;br /&gt;
&lt;a href=&quot;/meta-minha-agil&quot; target=&quot;_blank&quot;&gt;#4 - Organização e priorização&lt;/a&gt;&lt;br /&gt;
&lt;a href=&quot;/meta-minha-sprint-zero&quot; target=&quot;_blank&quot;&gt;#5 - Preparação do ambiente&lt;/a&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;Aguardem..
&lt;img src=&quot;https://media.giphy.com/media/l0HlKrB02QY0f1mbm/giphy-downsized.gif&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;</content><author><name>Leonardo Benedeti</name></author><category term="flutter" /><category term="android" /><category term="ios" /><category term="agil" /><category term="ux" /><category term="ui" /><category term="branding" /><category term="devops" /><category term="jenkins" /></entry><entry><title type="html">Clone do app PicPay usando Flutter</title><link href="http://localhost:4000/picpay-clone-using-flutter" rel="alternate" type="text/html" title="Clone do app PicPay usando Flutter" /><published>2019-10-28T00:00:00-03:00</published><updated>2019-10-28T16:00:00-03:00</updated><id>http://localhost:4000/picpay-clone-using-flutter</id><content type="html" xml:base="http://localhost:4000/picpay-clone-using-flutter">&lt;p&gt;“Um belo dia resolvi mudar e fazer tudo o que eu queria fazer”&lt;/p&gt;

&lt;p&gt;Sim. Em um dia, não tão belo como na música, decidi me aventurar e criar algo bacana usando Flutter.&lt;/p&gt;

&lt;p&gt;Participo de alguns grupos que fazem apps de exemplo, para mostrar arquiteturas e boas práticas, criando clones de apps já existentes.&lt;/p&gt;

&lt;p&gt;Com essa ideia em mente procurei algum app que ainda não tivesse sido clonado e não vi nenhum clone do PicPay, o canivete suíço dos pagamentos.&lt;/p&gt;

&lt;p&gt;Uso muito o app no meu dia a dia e foi uma motivação maior ainda replicar um app tão bom, que imagino que seja nativo, utilizando o Flutter.&lt;/p&gt;

&lt;p&gt;Como ponto de partida, tirei um print do meu celular e decidi recriar apenas a home do app, que mostra:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Saldo&lt;/li&gt;
  &lt;li&gt;Lista de pessoas&lt;/li&gt;
  &lt;li&gt;Tabs de transações, minhas e das pessoas que sigo&lt;/li&gt;
  &lt;li&gt;A lista referente as tabs&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Print do app original. 
&lt;img src=&quot;assets/img/picpay/original.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Seguindo para o desenvolvimento.&lt;/p&gt;

&lt;p&gt;Iniciei o projeto em um horário vago no período de trabalho, mas só consegui dar continuidade a noite em casa, devido a tarefas do trabalho.&lt;/p&gt;

&lt;p&gt;Seguindo assim, podemos analisar os ajustes a cada commit que fiz. Os detalhes dos commits vocês podem ver no repo. =D&lt;/p&gt;

&lt;p&gt;Primeiro ajuste: Apenas ajustes no app que o flutter te entrega pronto, inclusão de cores e ícones na title bar.
&lt;img src=&quot;assets/img/picpay/commits/1.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Segundo ajuste: Aqui tivemos uma mudança mais considerável, ajustei o header para sliver e customizei o title para fazer o ‘Meu Saldo’ e já adicionei os containers para os próximos ajustes.
&lt;img src=&quot;assets/img/picpay/commits/2.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Terceiro ajuste: Aqui iniciei a criação das listas de atividades e dos cards. Dei uma boeira na cor da tab também. era pra alterar a cor do indicator apenas mas alterei do container. #mybad
&lt;img src=&quot;assets/img/picpay/commits/3.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Quarto Ajuste: Cores devidamente ajustadas e card construido.
&lt;img src=&quot;assets/img/picpay/commits/4.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Quinto ajuste: Inclusão da lista de sugestões de contato para efetuar um pagamento.
&lt;img src=&quot;assets/img/picpay/commits/5.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Sexto ajuste: Inclusão de mais itens na lista e inclusão de icones printados do app original
&lt;img src=&quot;assets/img/picpay/commits/6.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Sétimo ajuste: Remover a necessidade da safe area na parte de baixo do layout. 
&lt;img src=&quot;assets/img/picpay/commits/7.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;E para comparar com o layout original vamos com uma imagem lado a lado.&lt;/p&gt;
&lt;div class=&quot;grid&quot;&gt;
    &lt;div class=&quot;a img&quot;&gt;
        &lt;img src=&quot;assets/img/picpay/original.png&quot; alt=&quot;&quot; /&gt;
    &lt;/div&gt;
    &lt;div class=&quot;b img&quot;&gt;
        &lt;img src=&quot;assets/img/picpay/clone.png&quot; alt=&quot;&quot; /&gt;
    &lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;Vale ressaltar. Criei aqui apenas a UI da home do PicPay, não me importei com algumas coisas, como arquitetura, boas práticas, BLoC e affins…&lt;/p&gt;

&lt;p&gt;Queria deixar a UI mais próxima possível do app original para me testar neste quesito.&lt;/p&gt;

&lt;p&gt;Quando tiver um pouco mais de tempo, pretendo plugar uma consulta a algum backend, que provavelmente eu vou criar também, e ai sim, plugar tudo que tiver de boas práticas, loadings e tudo mais pra deixar o app dinâmico.&lt;/p&gt;

&lt;p&gt;E pra quem não conhece o PicPay, da uma olhada ai que vale a pena usar.&lt;/p&gt;

&lt;p&gt;Aqui vai um convite pra você: &lt;a href=&quot;http://www.picpay.com/convite?@331X&quot; target=&quot;_blank&quot;&gt;http://www.picpay.com/convite?@331X&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;O código completo do app você pode conferir no meu repositório com todos os detalhes.&lt;br /&gt;
&lt;a href=&quot;https://github.com/leonardobenedeti/picpay_clone_flutter&quot; target=&quot;_blank&quot;&gt;https://github.com/leonardobenedeti/picpay_clone_flutter&lt;/a&gt;&lt;/p&gt;</content><author><name>Leonardo Benedeti</name></author><category term="flutter" /><category term="android" /><category term="ios" /></entry><entry><title type="html">[Tutorial] - Email sender with Sendgrid on Heroku</title><link href="http://localhost:4000/heroku-mail-sender-with-sendgrid" rel="alternate" type="text/html" title="[Tutorial] - Email sender with Sendgrid on Heroku" /><published>2019-10-07T00:00:00-03:00</published><updated>2019-10-07T16:00:00-03:00</updated><id>http://localhost:4000/heroku-mail-sender-with-sendgrid</id><content type="html" xml:base="http://localhost:4000/heroku-mail-sender-with-sendgrid">&lt;p&gt;Pensando como melhorar algumas plataformas que tenho online encontrei o Sendgrid dentro do nosso velho amigo Heroku.&lt;/p&gt;

&lt;p&gt;A Sendgrid é uma plataforma de envio de emails transacionais e de marketing.&lt;/p&gt;

&lt;p&gt;Abaixo vão dois links explicando melhor os detalhes:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://sendgrid.com/&quot; target=&quot;_blank&quot;&gt;Site oficial&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://elements.heroku.com/addons/sendgrid&quot; target=&quot;_blank&quot;&gt;Link para o add-on dentro do heroku&lt;/a&gt;(recomendo vir por aqui)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Agora já conhecendo melhor a plataforma, vamos configurar tudo para criar nossos emails transacionais.&lt;/p&gt;

&lt;p&gt;O primeiro passo é provisionar o add-on do Sendgrid dentro do Heroku.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;assets/img/sendgrid/1.0-provision-heroku.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Com o add-on configurado essa é o dashboard da plataforma.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;assets/img/sendgrid/2.0-dashboard.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Dentro do dashboard precisamos realizar duas configurações básicas são:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;1 - Criar uma api key no dashboard 
&lt;br /&gt;&lt;a href=&quot;https://app.sendgrid.com/settings/api_keys&quot; target=&quot;_blank&quot;&gt;Settings &amp;gt; API KEY&lt;/a&gt;
&lt;img src=&quot;assets/img/sendgrid/3.0-config-api-key.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;2 - Configurar a api key como variável no heroku
&lt;img src=&quot;assets/img/sendgrid/4.0-config-api-on-heroku.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Após as configurações básicas precisamos criar e testar um template ainda pelo dashboard&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Menu de templates
&lt;img src=&quot;assets/img/sendgrid/5.0-menu-templates.png&quot; alt=&quot;&quot; /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Aqui basta criar o template como preferir, usando a interface de arrasta e solta ou usando HTML&lt;/p&gt;

&lt;p&gt;Após criar o template precisamos testar e pra isso na própria plataforma temos um sandbox para enviar o email.
&lt;img src=&quot;assets/img/sendgrid/6.0-preview-and-test-template.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Ao enviar o email via sandbox, podemos conferir a caixa de entrada do email escolhido para receber o teste.
&lt;img src=&quot;assets/img/sendgrid/7.0-first-test-by-preview.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Podemos perceber que a variável user ainda está sem preenchimento. Vamos agora criar o backend para enviar o email de forma transacional.&lt;/p&gt;

&lt;h3 id=&quot;nodejs&quot;&gt;NodeJs&lt;/h3&gt;

&lt;p&gt;Para exemplificar o uso da plataforma criei um projeto e estou mantendo no meu github.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/leonardobenedeti/heroku-mail-sender&quot; target=&quot;_blank&quot;&gt;
  Link do repo
&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Ou você pode ‘deployar’ direto no heroku clicando abaixo&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://heroku.com/deploy?template=https://github.com/leonardobenedeti/heroku-mail-sender&quot; target=&quot;_blank&quot;&gt;
  &lt;img src=&quot;https://www.herokucdn.com/deploy/button.svg&quot; alt=&quot;Deploy&quot; /&gt;
&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;A base do código é o que busquei na doc oficial do Sendgrid para nodejs.&lt;/p&gt;

&lt;p&gt;Import e configuração da API KEY que criamos anteriormente.&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;sgMail&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;@sendgrid/mail&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;sgMail&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;setApiKey&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;process&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;env&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;SENDGRID_APIKEY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Código base utilizando o template que criamos enviando todos os parametros no request.&lt;/p&gt;
&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;post&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;/sendmail/template&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;req&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;res&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;to&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;template_data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;req&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;msg&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;to&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;to&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;from&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;templateId&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;d-ee4c43022cc74cec802e5398cb54a31f&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;dynamic_template_data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;template_data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;sgMail&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;send&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;msg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;then&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;success&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;res&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;status&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;200&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;send&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;success&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;Email enviado com sucesso&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}).&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;err&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;res&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;status&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;400&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;send&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;Algo de errado não está certo no envio de emails.&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}));&lt;/span&gt; 
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Com todo código configurado e rodando localmente vamos aos testes via postman.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;assets/img/sendgrid/8.0-request-postman.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Após o teste, podemos perceber que o parametro de usuário foi preenchido de acordo com o request via postman.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;assets/img/sendgrid/9.0-result-postman.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Dai pra frente, precisamos criar um template customizado para cada caso e transacionar como preferir. =D&lt;/p&gt;</content><author><name>Leonardo Benedeti</name></author><category term="heroku" /><category term="node.js" /><category term="sendgrid" /></entry><entry><title type="html">[POC] - Swipe up component com Ionic</title><link href="http://localhost:4000/poc-swipeup-components-ionic3" rel="alternate" type="text/html" title="[POC] - Swipe up component com Ionic" /><published>2019-09-10T00:00:00-03:00</published><updated>2019-09-10T16:00:00-03:00</updated><id>http://localhost:4000/poc-swipeup-components-ionic3</id><content type="html" xml:base="http://localhost:4000/poc-swipeup-components-ionic3">&lt;p&gt;Trabalhando em um projeto de curioso, ‘precisei’ fazer um swipe up em android nativo, com uma lib resolvi o problema e vida que segue.&lt;/p&gt;

&lt;p&gt;Porém fiquei curioso em saber se o Ionic seria capaz de fazer a mesma coisa.&lt;/p&gt;

&lt;p&gt;Iniciando uma busca, encontrei muita coisa mas nada funcionou 100% até encontrar esse tutorial que mostra como fazer e de uma maneira tão simples que vou deixar a referência logo no início.
&lt;a href=&quot;https://www.joshmorony.com/how-to-create-a-sliding-drawer-component-for-ionic-2/&quot; target=&quot;_blank&quot;&gt;Post referência&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;No post ele comenta um pouco sobre manipulação de DOM e como utilizar o &lt;a href=&quot;https://hammerjs.github.io/&quot;&gt;Hammer.js&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;No post original ele faz apenas o swipe, para abrir e fechar. Porém eu queria algumas coisa a mais.&lt;/p&gt;

&lt;p&gt;Como:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Abrir o componente clicando, mantendo o efeito&lt;/li&gt;
  &lt;li&gt;Abrir o componente clicando em um botão fora do contexto do componente&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Brinde:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Ajustar o css para ficar parecido com o componente normalmente usado nos apps atuais&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Listando as tarefas, vamos ao que precisei alterar.&lt;/p&gt;

&lt;h4 id=&quot;abrir-o-componente-clicando-mantendo-o-efeito&quot;&gt;Abrir o componente clicando, mantendo o efeito&lt;/h4&gt;

&lt;p&gt;Usando os eventos do Hammer.js apenas precisei incluir o &lt;code class=&quot;highlighter-rouge&quot;&gt;tap&lt;/code&gt; na lista de eventos para funcionar. Suave!&lt;/p&gt;

&lt;div class=&quot;language-typescript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;hammer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;on&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;tap&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;ev&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;open&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;O método &lt;code class=&quot;highlighter-rouge&quot;&gt;open()&lt;/code&gt; utiliza o DomController para manipular e animar o que precisamos, da seguinte maneira:&lt;/p&gt;

&lt;div class=&quot;language-typescript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;open&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(){&lt;/span&gt; 
    &lt;span class=&quot;c1&quot;&gt;// Este metodo já existia no tutorial original, apenas isolei em um método para controlar 'por fora'&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;domCtrl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;write&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;renderer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;setElementStyle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;element&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;nativeElement&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;transition&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;top 0.5s&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;renderer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;setElementStyle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;element&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;nativeElement&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;top&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;  &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;handleTop&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;px&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Com isso consegui com um clique na tela abrir o componente com o mesmo efeito do swipe. TOP.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Próximo…&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h4 id=&quot;abrir-o-componente-clicando-em-um-botão-fora-do-contexto-do-componente-com-parametros&quot;&gt;Abrir o componente clicando em um botão fora do contexto do componente, com parametros&lt;/h4&gt;

&lt;p&gt;Aqui tinha um desafio maior, sem nada na doc, afinal, estava fora do contexto do Hammer.js para conseguir manipular.&lt;/p&gt;

&lt;p&gt;Com isso precisei recorrer ao Events do angular para fazer essa comunicação entre componentes.&lt;/p&gt;

&lt;p&gt;Código da page home, envia o evento para algum lugar do app que escute.&lt;/p&gt;

&lt;div class=&quot;language-typescript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;callDetails&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(){&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;events&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;publish&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;open&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;dados&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;Dados via parametro&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Código do componente onde o listener fica esperando o evento para iniciar o método &lt;code class=&quot;highlighter-rouge&quot;&gt;open()&lt;/code&gt;.&lt;/p&gt;

&lt;div class=&quot;language-typescript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;constructor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kr&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;events&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Events&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;cm&quot;&gt;/* outros controllers...*/&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;events&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;subscribe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;open&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;params&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;details&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;params&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;dados&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;open&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// olha ele ai de novo. =D&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;blockquote&gt;
  &lt;p&gt;Mais uma pra dentro.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h4 id=&quot;ajustar-o-css-para-ficar-parecido-com-o-componente-normalmente-usado-nos-apps-atuais&quot;&gt;Ajustar o css para ficar parecido com o componente normalmente usado nos apps atuais&lt;/h4&gt;

&lt;p&gt;O &lt;code class=&quot;highlighter-rouge&quot;&gt;css&lt;/code&gt; do exemplo original, é literalmente um quadrado que faz o swipe up com o conteúdo da página.&lt;/p&gt;

&lt;p&gt;Para o exemplo que eu estava trabalhando precisei alterar isso um pouco.&lt;/p&gt;

&lt;p&gt;Exemplo do Josh:
&lt;img src=&quot;assets/img/ionic-swipe-up/example-josh.gif&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Vamos aos ajustes que fiz. Pouca coisa mas já deu uma diferença e mostra o que podemos ajustar para ficar do gosto que precisamos.&lt;/p&gt;

&lt;div class=&quot;language-scss highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;content-drawer&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nl&quot;&gt;background&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;map-get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$colors&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'primary'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;nl&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;100%&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;nl&quot;&gt;height&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;100%&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;nl&quot;&gt;position&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;absolute&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;nl&quot;&gt;z-index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;10&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;important&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;nl&quot;&gt;box-shadow&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0px&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;-4px&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;22px&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;-8px&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;rgba&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;.75&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;nl&quot;&gt;border-radius&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;20px&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;nl&quot;&gt;text-align&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;center&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;nl&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;map-get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$colors&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'light'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    
    &lt;span class=&quot;nc&quot;&gt;.linha&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nl&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;40%&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;nl&quot;&gt;height&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;4px&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;nl&quot;&gt;margin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;16px&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;auto&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;40px&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;nl&quot;&gt;border-radius&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;26px&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;nl&quot;&gt;background&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;map-get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$colors&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'light'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Resultado com os ajustes de css acima:
&lt;img src=&quot;assets/img/ionic-swipe-up/result-leo.gif&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Com isso encerro o exemplo com os ajustes necessários.&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;brinde&quot;&gt;Brinde&lt;/h3&gt;

&lt;p&gt;Esse exemplo publiquei no gh-pages de maneira bem automática. Como?&lt;/p&gt;

&lt;p&gt;O github pages é um “server” que hospeda páginas estáticas, como esta que você está vendo.&lt;/p&gt;

&lt;p&gt;Para publicar um app web ionic temos alguns truques.&lt;/p&gt;

&lt;p&gt;Antes de qualquer truque precisamos instalar os packages para isso.&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;npm &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;angular-cli-ghpages &lt;span class=&quot;nt&quot;&gt;--save&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Após instalar basta colar esse código dentro de scripts para automatizar tudo. Build e deploy.&lt;/p&gt;

&lt;div class=&quot;language-json highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nl&quot;&gt;&quot;scripts&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;gh-pages&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;ionic build --base-href 'https://leonardobenedeti.github.io/ionic3-swipe-up-component/' --prod &amp;amp;&amp;amp; npx ngh --dir=www/&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Com esse script, automaticamente o package do gh-pages cria a branch e publica tudo pra você. =D&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://leonardobenedeti.github.io/ionic3-swipe-up-component/&quot;&gt;Link do projeto publicado rodando&lt;/a&gt;&lt;/p&gt;</content><author><name>Leonardo Benedeti</name></author><category term="ionic" /><category term="github pages" /><category term="Hammer.js" /></entry><entry><title type="html">[Github PR] - Twitter UI Clone Bug fix</title><link href="http://localhost:4000/flutter-twitter-ui-clone-ug-fix" rel="alternate" type="text/html" title="[Github PR] - Twitter UI Clone Bug fix" /><published>2019-09-06T00:00:00-03:00</published><updated>2019-09-06T16:00:00-03:00</updated><id>http://localhost:4000/flutter-twitter-ui-clone-ug-fix</id><content type="html" xml:base="http://localhost:4000/flutter-twitter-ui-clone-ug-fix">&lt;h2 id=&quot;minha-primeira-aventura-flutter&quot;&gt;Minha “primeira” aventura Flutter&lt;/h2&gt;

&lt;p&gt;A título de curiosidade baixei um repo para entender mais sobre Flutter.&lt;/p&gt;

&lt;p&gt;Navegando encontrei esse post no medium&lt;br /&gt;
&lt;a href=&quot;https://medium.com/@diegoveloper/flutter-lets-know-the-scrollcontroller-and-scrollnotification-652b2685a4ac&quot; target=&quot;_blank&quot;&gt;Flutter: let’s know the ScrollController and ScrollNotification&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Estava procurando especificamente sobre como controlar a scrollview para emitir eventos enquanto o usuário estivesse scrollando a tela.&lt;/p&gt;

&lt;p&gt;Para minha grata surpresa, o repo além de ter o que eu procurava, encontrei um clone do Twitter, especificamente a UI da page de perfil, com efeitos e tudo.&lt;/p&gt;

&lt;p&gt;Ao tentar incluir em um projeto notei um bug ao scrollar as tabs do projeto original.&lt;/p&gt;

&lt;p&gt;Quando eu scrollava as tabs o avatar iniciava a animação, porém, não deveria acontecer isso.&lt;/p&gt;

&lt;p&gt;Problema:
&lt;img src=&quot;assets/videos/bug-scrolling-tabs.gif&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Esse bug me fez quase desistir da UI que antes considerei perfeita para o que estava criando para estudos.&lt;/p&gt;

&lt;p&gt;Mas como o Flutter é um toolkit desafiador e o Dart é intuitivo e simples, pensei: Porque não tentar arrumar isso?!&lt;/p&gt;

&lt;p&gt;Com algum tempo procurando o problema e imprimindo tudo que poderia de logs, identifiquei que a animação do avatar estava sendo iniciado com QUALQUER scroll na tela, mais especificamente falando do header.&lt;/p&gt;

&lt;p&gt;Encontrei a propriedade &lt;code class=&quot;highlighter-rouge&quot;&gt;scrollNotification.metrics.axisDirection&lt;/code&gt; que identificava se o scroll era vertical&lt;code class=&quot;highlighter-rouge&quot;&gt;(top-&amp;gt;bottom or bottom-&amp;gt;top)&lt;/code&gt; ou horizontal&lt;code class=&quot;highlighter-rouge&quot;&gt;(left-&amp;gt;right or right-&amp;gt;left)&lt;/code&gt; e com isso consegui controlar quando a animação iniciaria ou não.&lt;/p&gt;

&lt;p&gt;Solução:
&lt;img src=&quot;assets/videos/bug-fixed-scroll-tabs.gif&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;O pull request desse ajuste foi enviado para o repo original e espero que ajude outras pessoas.&lt;br /&gt;
&lt;a href=&quot;https://github.com/diegoveloper/flutter-samples/pull/11&quot; target=&quot;_blank&quot;&gt;Link para o pull request&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Obs.: essa foi a minha primeira contribuição com a comunidade open source. =D&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;Informações importantes para quem quer entrar para o mundo Flutter:&lt;/p&gt;

&lt;p&gt;Temos uma mega comunidade no Brasil que fez agora no fim de agosto o evento Flutter Talks, onde conheci o git em questão, comentado acima. O Diego Velasquez mostrou as diferenças entre Provider e Bloc, além dele tiveram muitas outras talks sobre todos os assuntos possíveis de Flutter.&lt;/p&gt;

&lt;p&gt;A comunidade tem muito conteúdo de flutter. Recomendo acesso ao grupo e todo conteúdo oferecido por eles. Vale a pena!&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://t.me/flutterando&quot; target=&quot;_blank&quot;&gt;Telegram da Comunidade Flutterando&lt;/a&gt;&lt;/p&gt;</content><author><name>Leonardo Benedeti</name></author><category term="flutter" /><category term="github" /><category term="pull requests" /></entry></feed>